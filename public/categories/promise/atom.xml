<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: promise | NMOTW]]></title>
  <link href="http://hemanth.github.io/nmotw.in/public/categories/promise/atom.xml" rel="self"/>
  <link href="http://hemanth.github.io/nmotw.in/"/>
  <updated>2014-08-28T22:33:18+05:30</updated>
  <id>http://hemanth.github.io/nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git-promise]]></title>
    <link href="http://hemanth.github.io/nmotw.in/git-promise/"/>
    <updated>2014-08-14T17:51:17+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/git-promise</id>
    <content type="html"><![CDATA[<h2>git-promise</h2>

<blockquote><p>Simple wrapper that allows you to run any <code>git</code> command using a more intuitive syntax.</p></blockquote>

<p><a href="https://www.npmjs.org/package/git-promise">git-promise</a> is a product of a very good combination of <code>Q</code> and <code>ShellJS</code> and returns a promise for us, it also handles exit code automatically. Parsing the output or dealing with non 0 exit code is also very clean and easy with this.</p>

<p>We can also chain commands, execute the <code>git</code> command in a specific dir. If those are not enough it also provides a copule of <code>util</code> methods.</p>

<p>Installing it: <code>$ npm install git-promise</code></p>

<p><strong>Sample usage:</strong></p>

<p>```javascript
var git = require('git-promise');</p>

<p>git("init")
.then(console.log)
.fail(console.error);
```</p>

<p>That would output something like: <code>Initialized empty Git repository in ...</code></p>

<p><strong>More complex example:</strong></p>

<p>Say we have a <code>test</code> dir that has a file named <code>me</code> with the content <code>blame me</code> and we run <code>git blame</code> on it.</p>

<p>```javascript
git("blame me", {</p>

<pre><code>cwd: "blame"
</code></pre>

<p>}, function(output, code) {</p>

<pre><code>// output and cwd will be as specified.
</code></pre>

<p>}).then(function(what) {</p>

<pre><code>// you would have switched back to current dir.
</code></pre>

<p>}).fail(function(err) {</p>

<pre><code>// If there are any errors
</code></pre>

<p>}).fin(function() {</p>

<pre><code>// Finally reach here.
</code></pre>

<p>});
```</p>

<p>All in all <code>git-promise</code> is a very well composed module and has a lot of potential to get more better, a huge thanks to <a href="https://twitter.com/piuccio">Fabio Crisci</a> for authoring this module.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/git-promise/git-promise.gif" alt="git-promise" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lie-denodify]]></title>
    <link href="http://hemanth.github.io/nmotw.in/lie-denodify/"/>
    <updated>2014-04-10T17:38:55+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/lie-denodify</id>
    <content type="html"><![CDATA[<p>Even though <a href="http://nmotw.in/rsvp/">RSVP</a> provides a <code>denodeify</code> API, <a href="https://www.npmjs.org/package/lie-denodify">lie-denodify's</a> main focus is to turn a node style callback into a promise based one.</p>

<p><a href="https://www.npmjs.org/package/lie-denodify">lie-denofiy</a> internally uses <a href="https://github.com/calvinmetcalf/lie">lie</a> which is a basic but performanent promise implementation.</p>

<p>All it does to convert an async function to a promise based one is to return a promise with the help of lie:</p>

<p>```javascript
var promise = require('lie');
function denodify(func) {</p>

<pre><code>return function() {
    var args = Array.prototype.concat.apply([], arguments);
    return promise(function(resolve, reject) {
        args.push(function(err, success) {
            if (err) {
                reject(err);
            }
            else {
                resolve(success);
            }
        });
        func.apply(undefined, args);
    });
};
</code></pre>

<p>}
module.exports = denodify;
```</p>

<p><strong>Installation:</strong> <code>npm install lie-denodify</code></p>

<p><strong>Usage example:</strong></p>

<p>Let's try and covert <code>fs.stat</code> function to a promise!</p>

<p>First of all let's have a look at how <code>fs.stat</code> works before conversion.</p>

<p>```js
var fstat = require('fs').stat;</p>

<p>fstat('/tmp',function(err,res){</p>

<pre><code>if(!err){
  console.log(res);
} else {
    throw new Error(err);
}
</code></pre>

<p>});</p>

<p>/*
Would log something like:
{ dev: 16777217,
  mode: 17407,
  nlink: 14,
  uid: 0,
  gid: 0,
  rdev: 0,
  blksize: 4096,
  ino: 144575596,
  size: 476,
  blocks: 0,
  atime: Thu Apr 10 2014 17:38:18 GMT+0530 (IST),
  mtime: Thu Apr 10 2014 17:51:50 GMT+0530 (IST),
  ctime: Thu Apr 10 2014 17:51:50 GMT+0530 (IST) }</p>

<p> And in case of an Error it would throw an error</p>

<p>*/
```</p>

<p>Now, let's convert it into a promise:</p>

<p>```js</p>

<p>var lieDndfy = require('lie-denodify');</p>

<p>var statp = lieDndfy ( require('fs').stat );</p>

<p>statp('/tmp').then(console.log,console.error);</p>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/lie-denodify/lie-denodify.gif" alt="lie-denodify" /></p>

<p>Thanks to <a href="http://calvinmetcalf.com/">Calvin Metcalf</a> the author of lie and lie-denofiy.</p>

<p>Learn to lie this week ;)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSVP]]></title>
    <link href="http://hemanth.github.io/nmotw.in/rsvp/"/>
    <updated>2014-03-04T06:23:51+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/rsvp</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.org/package/rsvp">RSVP</a> : A lightweight library that provides tools for organizing asynchronous code.</p>

<p>This module gives a tiny implementation of <a href="http://promises-aplus.github.com/promises-spec/">Promises/A+</a>.</p>

<p>As usual do a <code>npm install rsvp</code> to get the module.</p>

<p><strong>Basic Usage:</strong></p>

<p>```javascript
var RSVP = require('rsvp');</p>

<p>var promise = new RSVP.Promise(function(resolve, reject) {
  // succeed
  resolve(value);
  // or reject
  reject(error);
});</p>

<p>promise.then(function(value) {
  // success
}, function(value) {
  // failure
});
```</p>

<p>Once a promise has been resolved or rejected, it cannot be resolved or rejected again.</p>

<p>It give some more goddies like:</p>

<ul>
<li><p>Chaining</p></li>
<li><p>Easy Error Handling.</p></li>
<li><p>Compatible with <a href="http://taskjs.org/">TaskJS</a>.</p></li>
</ul>


<p>So, what are you waiting for? Go got it and have fun!</p>
]]></content>
  </entry>
  
</feed>
